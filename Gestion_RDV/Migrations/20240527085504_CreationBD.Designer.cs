// <auto-generated />
using System;
using Gestion_RDV.Models.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Gestion_RDV.Migrations
{
    [DbContext(typeof(GestionRdvDbContext))]
    [Migration("20240527085504_CreationBD")]
    partial class CreationBD
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConversationUser", b =>
                {
                    b.Property<int>("ConversationId")
                        .HasColumnType("integer");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("integer");

                    b.HasKey("ConversationId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("ConversationUser");
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<string>("Cite")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Cite");

                    b.Property<string>("Gouvernerat")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Gouvernerat");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Ville");

                    b.HasKey("Id");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Availability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.HasKey("Id");

                    b.ToTable("t_availability", (string)null);
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("PostId")
                        .HasColumnType("integer")
                        .HasColumnName("PostId");

                    b.Property<int>("ReviewId")
                        .HasColumnType("integer")
                        .HasColumnName("ReviewId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Conversations", (string)null);
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Devis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer")
                        .HasColumnName("AppointmentId");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("PatientId");

                    b.Property<decimal>("PrixAvantTva")
                        .HasColumnType("numeric")
                        .HasColumnName("PrixAvantTva");

                    b.Property<decimal>("PrixFinal")
                        .HasColumnType("numeric")
                        .HasColumnName("PrixFinal");

                    b.Property<int>("ProfessionelId")
                        .HasColumnType("integer")
                        .HasColumnName("ProfessionelId");

                    b.Property<decimal>("Tva")
                        .HasColumnType("numeric")
                        .HasColumnName("Tva");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ProfessionelId");

                    b.ToTable("Devis", (string)null);
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Etat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Etats", (string)null);
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PostId")
                        .HasColumnType("integer")
                        .HasColumnName("PostId");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes", (string)null);
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConversationId")
                        .HasColumnType("integer")
                        .HasColumnName("ConversationId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("From");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Text");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("EtatId")
                        .HasColumnType("integer")
                        .HasColumnName("EtatId");

                    b.Property<int?>("EtatId1")
                        .HasColumnType("integer");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("PatientId");

                    b.Property<int>("ProfessionelId")
                        .HasColumnType("integer")
                        .HasColumnName("ProfessionelId");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("integer")
                        .HasColumnName("ReceiverId");

                    b.Property<int>("RendezVousId")
                        .HasColumnType("integer")
                        .HasColumnName("RendezVousId");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer")
                        .HasColumnName("SenderId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("EtatId");

                    b.HasIndex("EtatId1");

                    b.HasIndex("PatientId");

                    b.HasIndex("ProfessionelId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("RendezVousId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("text")
                        .HasColumnName("Type");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Avatar");

                    b.Property<string>("CV")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CV");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<string>("Diplome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Diplome");

                    b.Property<string>("DomainePrincipal")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DomainePrincipal");

                    b.Property<string>("DomaineSecondaires")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DomaineSecondaires");

                    b.Property<string>("ImageDiplome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ImageDiplome");

                    b.Property<string>("Metier")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Metier");

                    b.Property<int>("Nbno")
                        .HasColumnType("integer")
                        .HasColumnName("Nbno");

                    b.Property<int>("Nbyes")
                        .HasColumnType("integer")
                        .HasColumnName("Nbyes");

                    b.Property<double>("PrixPCR")
                        .HasColumnType("double precision")
                        .HasColumnName("PrixPCR");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("Rating");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Tags");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.Property<string>("Video")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Video");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles", (string)null);
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.RendezVous", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EndDate");

                    b.Property<int>("EtatId")
                        .HasColumnType("integer")
                        .HasColumnName("EtatId");

                    b.Property<string>("FichierJoint")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FichierJoint");

                    b.Property<int>("Idevent")
                        .HasColumnType("integer")
                        .HasColumnName("Idevent");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("PatientId");

                    b.Property<double>("Prix")
                        .HasColumnType("double precision")
                        .HasColumnName("Prix");

                    b.Property<int>("ProfessionelId")
                        .HasColumnType("integer")
                        .HasColumnName("ProfessionelId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("StartDate");

                    b.Property<string>("TypeRendezVous")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TypeRendezVous");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("ProfessionelId");

                    b.ToTable("RendezVous", (string)null);
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("t_review", (string)null);
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Social", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Facebook")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("facebook");

                    b.Property<string>("Instagram")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("instagram");

                    b.Property<string>("Linkedin")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("linkedin");

                    b.Property<string>("Twitter")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("twitter");

                    b.Property<string>("Youtube")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("youtube");

                    b.HasKey("Id");

                    b.ToTable("t_social", (string)null);
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Telephone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Fix")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fix");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mobile");

                    b.HasKey("Id");

                    b.ToTable("t_telephone", (string)null);
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activated")
                        .HasColumnType("boolean")
                        .HasColumnName("Activated");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("BirthDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("LastName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Role");

                    b.Property<string>("SecretToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("SecretToken");

                    b.Property<string>("Sexe")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Sexe");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProfileProfile", b =>
                {
                    b.Property<int>("AbonnesId")
                        .HasColumnType("integer");

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer");

                    b.HasKey("AbonnesId", "ProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Abonnes", (string)null);
                });

            modelBuilder.Entity("ConversationUser", b =>
                {
                    b.HasOne("Gestion_RDV.Models.EntityFramework.Conversation", null)
                        .WithMany()
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion_RDV.Models.EntityFramework.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Address", b =>
                {
                    b.HasOne("Gestion_RDV.Models.EntityFramework.Profile", "Profile")
                        .WithOne("Address")
                        .HasForeignKey("Gestion_RDV.Models.EntityFramework.Address", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Availability", b =>
                {
                    b.HasOne("Gestion_RDV.Models.EntityFramework.Profile", "Profile")
                        .WithMany("Availables")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Comment", b =>
                {
                    b.HasOne("Gestion_RDV.Models.EntityFramework.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion_RDV.Models.EntityFramework.Review", "Review")
                        .WithMany("Comments")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion_RDV.Models.EntityFramework.Profile", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Devis", b =>
                {
                    b.HasOne("Gestion_RDV.Models.EntityFramework.RendezVous", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gestion_RDV.Models.EntityFramework.Profile", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gestion_RDV.Models.EntityFramework.Profile", "Professionel")
                        .WithMany()
                        .HasForeignKey("ProfessionelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Patient");

                    b.Navigation("Professionel");
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Like", b =>
                {
                    b.HasOne("Gestion_RDV.Models.EntityFramework.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion_RDV.Models.EntityFramework.Profile", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Message", b =>
                {
                    b.HasOne("Gestion_RDV.Models.EntityFramework.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Notification", b =>
                {
                    b.HasOne("Gestion_RDV.Models.EntityFramework.Etat", "Etat")
                        .WithMany()
                        .HasForeignKey("EtatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gestion_RDV.Models.EntityFramework.Etat", null)
                        .WithMany("Notifications")
                        .HasForeignKey("EtatId1");

                    b.HasOne("Gestion_RDV.Models.EntityFramework.Profile", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gestion_RDV.Models.EntityFramework.Profile", "Professionel")
                        .WithMany()
                        .HasForeignKey("ProfessionelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gestion_RDV.Models.EntityFramework.Profile", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gestion_RDV.Models.EntityFramework.RendezVous", "RendezVous")
                        .WithMany()
                        .HasForeignKey("RendezVousId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gestion_RDV.Models.EntityFramework.Profile", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Etat");

                    b.Navigation("Patient");

                    b.Navigation("Professionel");

                    b.Navigation("Receiver");

                    b.Navigation("RendezVous");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Post", b =>
                {
                    b.HasOne("Gestion_RDV.Models.EntityFramework.Profile", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Profile", b =>
                {
                    b.HasOne("Gestion_RDV.Models.EntityFramework.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Gestion_RDV.Models.EntityFramework.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.RendezVous", b =>
                {
                    b.HasOne("Gestion_RDV.Models.EntityFramework.Profile", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gestion_RDV.Models.EntityFramework.Profile", "Professionel")
                        .WithMany()
                        .HasForeignKey("ProfessionelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Professionel");
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Review", b =>
                {
                    b.HasOne("Gestion_RDV.Models.EntityFramework.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion_RDV.Models.EntityFramework.Profile", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Social", b =>
                {
                    b.HasOne("Gestion_RDV.Models.EntityFramework.Profile", "Profile")
                        .WithOne("Social")
                        .HasForeignKey("Gestion_RDV.Models.EntityFramework.Social", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Telephone", b =>
                {
                    b.HasOne("Gestion_RDV.Models.EntityFramework.Profile", "Profile")
                        .WithOne("Telephone")
                        .HasForeignKey("Gestion_RDV.Models.EntityFramework.Telephone", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ProfileProfile", b =>
                {
                    b.HasOne("Gestion_RDV.Models.EntityFramework.Profile", null)
                        .WithMany()
                        .HasForeignKey("AbonnesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion_RDV.Models.EntityFramework.Profile", null)
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Etat", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Profile", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Availables");

                    b.Navigation("Comments");

                    b.Navigation("Reviews");

                    b.Navigation("Social")
                        .IsRequired();

                    b.Navigation("Telephone")
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.Review", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Gestion_RDV.Models.EntityFramework.User", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
